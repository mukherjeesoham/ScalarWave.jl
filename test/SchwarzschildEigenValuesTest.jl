#--------------------------------------------------------------------
# Spacetime Discretization methods in Julia
# Soham 04-2018
# Wave equation on Schwarzschild
#--------------------------------------------------------------------

using Einsum

struct U end
struct V end
struct UV end

tic()
#--------------------------------------------------------------------
# Define boundary and the product space
#--------------------------------------------------------------------
P1, P2 = 5, 5
M   = 1.0
Umin, Umax = -3M, -7M
Vmin, Vmax =  5M,  M

#--------------------------------------------------------------------
# Define derivative and boundary operators
#--------------------------------------------------------------------
SUV = ProductSpace{GaussLobatto{U,P1}, GaussLobatto{V,P2}}
洧댳 = boundary(Null, SUV)

#--------------------------------------------------------------------
# Define coordinates and their associated derivatives
#--------------------------------------------------------------------
洧뎳 = Field(SUV, (U,V)->U)
洧뎴 = Field(SUV, (U,V)->V)
풪 = Field(SUV, (洧높,洧놓)->pi/2)
픳 = Field(SUV, (洧높,洧놓)->0)
칮 = zero(SUV) 
칒 = zero(Spatial, SUV) 

洧높 = (Umax + Umin)/2 + (Umax - Umin)/2*洧뎳  
洧놓 = (Vmax + Vmin)/2 - (Vmax - Vmin)/2*洧뎴  

t = Field(SUV, (洧높,洧놓)->find_t_of_UV(洧높, 洧놓, M), 洧높, 洧놓)
r = Field(SUV, (洧높,洧놓)->find_r_of_UV(洧높, 洧놓, M), 洧높, 洧놓)

洧댵洧높, 洧댵洧놓 = derivativetransform(SUV, 洧높, 洧놓) 
洧댵풪, 洧댵픳 = 칒, 칒

#--------------------------------------------------------------------
# Set boundary conditions
#--------------------------------------------------------------------
픠 = 0 
洧돇 = exp(-((-5M + 洧놓)^2)) 
洧뎹 = 洧댳*洧돇
drawpatch(洧돇, "boundary-field")

#--------------------------------------------------------------------
# Define metric functions 
#--------------------------------------------------------------------
洧눋洧높洧놓 = -32*(M^3/r)*(exp(-r/2M))
洧눋풪풪 = r^2
洧눋픳픳 = (r*sin(풪))^2

洧눋洧높洧높 = 洧눋洧놓洧놓 = 칮
洧눋洧높풪 = 洧눋洧높픳 = 칮
洧눋洧놓풪 = 洧눋洧놓픳 = 칮
洧눋풪픳 = 칮

洧뎾    = Metric{dd, 4}([洧눋洧높洧높, 洧눋洧높洧놓, 洧눋洧높풪, 洧눋洧높픳, 
                           洧눋洧놓洧놓, 洧눋洧놓풪, 洧눋洧놓픳,
                                洧눋풪풪, 洧눋풪픳,
                                     洧눋픳픳])

eigU, eigV = eigvals(洧뎾) 

drawpatch(eigU, "plots/eigU")
drawpatch(eigV, "plots/eigV")
drawtensorfield(洧뎾, "plots/eigenellipsess")
